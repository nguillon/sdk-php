<?php
/**
 * RemittanceSlipInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * RemittanceSlipInfo Class Doc Comment
 *
 * @category    Class
 * @description The keys are always present, but their values may be null.
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RemittanceSlipInfo implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'recipient' => 'string',
        'iban_recipient' => 'string',
        'bic_recipient' => 'string',
        'amount' => 'string',
        'purpose1' => 'string',
        'purpose2' => 'string',
        'sender' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'recipient' => 'recipient',
        'iban_recipient' => 'iban_recipient',
        'bic_recipient' => 'bic_recipient',
        'amount' => 'amount',
        'purpose1' => 'purpose1',
        'purpose2' => 'purpose2',
        'sender' => 'sender'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'recipient' => 'setRecipient',
        'iban_recipient' => 'setIbanRecipient',
        'bic_recipient' => 'setBicRecipient',
        'amount' => 'setAmount',
        'purpose1' => 'setPurpose1',
        'purpose2' => 'setPurpose2',
        'sender' => 'setSender'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'recipient' => 'getRecipient',
        'iban_recipient' => 'getIbanRecipient',
        'bic_recipient' => 'getBicRecipient',
        'amount' => 'getAmount',
        'purpose1' => 'getPurpose1',
        'purpose2' => 'getPurpose2',
        'sender' => 'getSender'
    );
  
    
    /**
      * $recipient Name of the payment's recipient.
      * @var string
      */
    protected $recipient;
    
    /**
      * $iban_recipient IBAN of the payment's recipient.
      * @var string
      */
    protected $iban_recipient;
    
    /**
      * $bic_recipient BIC of the payment's recipient.
      * @var string
      */
    protected $bic_recipient;
    
    /**
      * $amount Amount to be transferred.
      * @var string
      */
    protected $amount;
    
    /**
      * $purpose1 First line of the purpose field.
      * @var string
      */
    protected $purpose1;
    
    /**
      * $purpose2 Second line of the purpose field.
      * @var string
      */
    protected $purpose2;
    
    /**
      * $sender Name of the payment's sender.
      * @var string
      */
    protected $sender;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->recipient = $data["recipient"];
            $this->iban_recipient = $data["iban_recipient"];
            $this->bic_recipient = $data["bic_recipient"];
            $this->amount = $data["amount"];
            $this->purpose1 = $data["purpose1"];
            $this->purpose2 = $data["purpose2"];
            $this->sender = $data["sender"];
        }
    }
    
    /**
     * Gets recipient
     * @return string
     */
    public function getRecipient()
    {
        return $this->recipient;
    }
  
    /**
     * Sets recipient
     * @param string $recipient Name of the payment's recipient.
     * @return $this
     */
    public function setRecipient($recipient)
    {
        
        $this->recipient = $recipient;
        return $this;
    }
    
    /**
     * Gets iban_recipient
     * @return string
     */
    public function getIbanRecipient()
    {
        return $this->iban_recipient;
    }
  
    /**
     * Sets iban_recipient
     * @param string $iban_recipient IBAN of the payment's recipient.
     * @return $this
     */
    public function setIbanRecipient($iban_recipient)
    {
        
        $this->iban_recipient = $iban_recipient;
        return $this;
    }
    
    /**
     * Gets bic_recipient
     * @return string
     */
    public function getBicRecipient()
    {
        return $this->bic_recipient;
    }
  
    /**
     * Sets bic_recipient
     * @param string $bic_recipient BIC of the payment's recipient.
     * @return $this
     */
    public function setBicRecipient($bic_recipient)
    {
        
        $this->bic_recipient = $bic_recipient;
        return $this;
    }
    
    /**
     * Gets amount
     * @return string
     */
    public function getAmount()
    {
        return $this->amount;
    }
  
    /**
     * Sets amount
     * @param string $amount Amount to be transferred.
     * @return $this
     */
    public function setAmount($amount)
    {
        
        $this->amount = $amount;
        return $this;
    }
    
    /**
     * Gets purpose1
     * @return string
     */
    public function getPurpose1()
    {
        return $this->purpose1;
    }
  
    /**
     * Sets purpose1
     * @param string $purpose1 First line of the purpose field.
     * @return $this
     */
    public function setPurpose1($purpose1)
    {
        
        $this->purpose1 = $purpose1;
        return $this;
    }
    
    /**
     * Gets purpose2
     * @return string
     */
    public function getPurpose2()
    {
        return $this->purpose2;
    }
  
    /**
     * Sets purpose2
     * @param string $purpose2 Second line of the purpose field.
     * @return $this
     */
    public function setPurpose2($purpose2)
    {
        
        $this->purpose2 = $purpose2;
        return $this;
    }
    
    /**
     * Gets sender
     * @return string
     */
    public function getSender()
    {
        return $this->sender;
    }
  
    /**
     * Sets sender
     * @param string $sender Name of the payment's sender.
     * @return $this
     */
    public function setSender($sender)
    {
        
        $this->sender = $sender;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
