<?php
/**
 * RegisterInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Organizeme\Xtractor
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Organizeme\Xtractor\Models;

use \ArrayAccess;
/**
 * RegisterInfo Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Organizeme\Xtractor
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RegisterInfo implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'register' => 'string',
        'country' => 'string',
        'code' => 'string',
        'business_register' => 'string',
        'court' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'register' => 'register',
        'country' => 'country',
        'code' => 'code',
        'business_register' => 'business_register',
        'court' => 'court'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'register' => 'setRegister',
        'country' => 'setCountry',
        'code' => 'setCode',
        'business_register' => 'setBusinessRegister',
        'court' => 'setCourt'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'register' => 'getRegister',
        'country' => 'getCountry',
        'code' => 'getCode',
        'business_register' => 'getBusinessRegister',
        'court' => 'getCourt'
    );
  
    
    /**
      * $register The register this code refers to.
      * @var string
      */
    protected $register;
    
    /**
      * $country Country of register (2-letter code).
      * @var string
      */
    protected $country;
    
    /**
      * $code ID code of register entry.
      * @var string
      */
    protected $code;
    
    /**
      * $business_register Section of business register. FN is the Austrian 'Firmenbuch' register. Only present if this element represents a business register entry.
      * @var string
      */
    protected $business_register;
    
    /**
      * $court City of register court. Only present if this element represents a business register entry.
      * @var string
      */
    protected $court;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->register = $data["register"];
            $this->country = $data["country"];
            $this->code = $data["code"];
            $this->business_register = $data["business_register"];
            $this->court = $data["court"];
        }
    }
    
    /**
     * Gets register
     * @return string
     */
    public function getRegister()
    {
        return $this->register;
    }
  
    /**
     * Sets register
     * @param string $register The register this code refers to.
     * @return $this
     */
    public function setRegister($register)
    {
        $allowed_values = array("national_tax_id", "VATIN", "business_register");
        if (!in_array($register, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'register', must be one of 'national_tax_id', 'VATIN', 'business_register'");
        }
        $this->register = $register;
        return $this;
    }
    
    /**
     * Gets country
     * @return string
     */
    public function getCountry()
    {
        return $this->country;
    }
  
    /**
     * Sets country
     * @param string $country Country of register (2-letter code).
     * @return $this
     */
    public function setCountry($country)
    {
        
        $this->country = $country;
        return $this;
    }
    
    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->code;
    }
  
    /**
     * Sets code
     * @param string $code ID code of register entry.
     * @return $this
     */
    public function setCode($code)
    {
        
        $this->code = $code;
        return $this;
    }
    
    /**
     * Gets business_register
     * @return string
     */
    public function getBusinessRegister()
    {
        return $this->business_register;
    }
  
    /**
     * Sets business_register
     * @param string $business_register Section of business register. FN is the Austrian 'Firmenbuch' register. Only present if this element represents a business register entry.
     * @return $this
     */
    public function setBusinessRegister($business_register)
    {
        $allowed_values = array("HRA", "HRB", "GnR", "VR", "PR", "FN");
        if (!in_array($business_register, $allowed_values)) {
            throw new \InvalidArgumentException("Invalid value for 'business_register', must be one of 'HRA', 'HRB', 'GnR', 'VR', 'PR', 'FN'");
        }
        $this->business_register = $business_register;
        return $this;
    }
    
    /**
     * Gets court
     * @return string
     */
    public function getCourt()
    {
        return $this->court;
    }
  
    /**
     * Sets court
     * @param string $court City of register court. Only present if this element represents a business register entry.
     * @return $this
     */
    public function setCourt($court)
    {
        
        $this->court = $court;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
