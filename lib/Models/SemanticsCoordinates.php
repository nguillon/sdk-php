<?php
/**
 * SemanticsCoordinates
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
/**
 * SemanticsCoordinates Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SemanticsCoordinates implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'style' => '\Swagger\Client\Model\SemanticsStyle',
        'page' => 'int',
        'baselines' => 'int[]',
        'absolute' => '\Swagger\Client\Model\SemanticsAbsCoords',
        'relative' => '\Swagger\Client\Model\SemanticsRelCoords'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'style' => 'style',
        'page' => 'page',
        'baselines' => 'baselines',
        'absolute' => 'absolute',
        'relative' => 'relative'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'style' => 'setStyle',
        'page' => 'setPage',
        'baselines' => 'setBaselines',
        'absolute' => 'setAbsolute',
        'relative' => 'setRelative'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'style' => 'getStyle',
        'page' => 'getPage',
        'baselines' => 'getBaselines',
        'absolute' => 'getAbsolute',
        'relative' => 'getRelative'
    );
  
    
    /**
      * $style 
      * @var \Swagger\Client\Model\SemanticsStyle
      */
    protected $style;
    
    /**
      * $page 0-based number of page.
      * @var int
      */
    protected $page;
    
    /**
      * $baselines Array of the baselines of this element's text, the length of this array describes the number of lines.
      * @var int[]
      */
    protected $baselines;
    
    /**
      * $absolute Absolute coordinates of elements.
      * @var \Swagger\Client\Model\SemanticsAbsCoords
      */
    protected $absolute;
    
    /**
      * $relative Relative coordinates of elements (width/height of page == 1).
      * @var \Swagger\Client\Model\SemanticsRelCoords
      */
    protected $relative;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->style = $data["style"];
            $this->page = $data["page"];
            $this->baselines = $data["baselines"];
            $this->absolute = $data["absolute"];
            $this->relative = $data["relative"];
        }
    }
    
    /**
     * Gets style
     * @return \Swagger\Client\Model\SemanticsStyle
     */
    public function getStyle()
    {
        return $this->style;
    }
  
    /**
     * Sets style
     * @param \Swagger\Client\Model\SemanticsStyle $style 
     * @return $this
     */
    public function setStyle($style)
    {
        
        $this->style = $style;
        return $this;
    }
    
    /**
     * Gets page
     * @return int
     */
    public function getPage()
    {
        return $this->page;
    }
  
    /**
     * Sets page
     * @param int $page 0-based number of page.
     * @return $this
     */
    public function setPage($page)
    {
        
        $this->page = $page;
        return $this;
    }
    
    /**
     * Gets baselines
     * @return int[]
     */
    public function getBaselines()
    {
        return $this->baselines;
    }
  
    /**
     * Sets baselines
     * @param int[] $baselines Array of the baselines of this element's text, the length of this array describes the number of lines.
     * @return $this
     */
    public function setBaselines($baselines)
    {
        
        $this->baselines = $baselines;
        return $this;
    }
    
    /**
     * Gets absolute
     * @return \Swagger\Client\Model\SemanticsAbsCoords
     */
    public function getAbsolute()
    {
        return $this->absolute;
    }
  
    /**
     * Sets absolute
     * @param \Swagger\Client\Model\SemanticsAbsCoords $absolute Absolute coordinates of elements.
     * @return $this
     */
    public function setAbsolute($absolute)
    {
        
        $this->absolute = $absolute;
        return $this;
    }
    
    /**
     * Gets relative
     * @return \Swagger\Client\Model\SemanticsRelCoords
     */
    public function getRelative()
    {
        return $this->relative;
    }
  
    /**
     * Sets relative
     * @param \Swagger\Client\Model\SemanticsRelCoords $relative Relative coordinates of elements (width/height of page == 1).
     * @return $this
     */
    public function setRelative($relative)
    {
        
        $this->relative = $relative;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
