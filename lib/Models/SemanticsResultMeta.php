<?php
/**
 * SemanticsResultMeta
 *
 * PHP version 5
 *
 * @category Class
 * @package  Organizeme\Xtractor
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Organizeme\Xtractor\Models;

use \ArrayAccess;
/**
 * SemanticsResultMeta Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     Organizeme\Xtractor
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SemanticsResultMeta implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'request_id' => 'string',
        'extractors' => 'string[]',
        'file' => '\Organizeme\Xtractor\Models\SemanticsResultMetaFile',
        'version' => 'string',
        'processing_time' => 'int'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'request_id' => 'request_id',
        'extractors' => 'extractors',
        'file' => 'file',
        'version' => 'version',
        'processing_time' => 'processingTime'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'request_id' => 'setRequestId',
        'extractors' => 'setExtractors',
        'file' => 'setFile',
        'version' => 'setVersion',
        'processing_time' => 'setProcessingTime'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'request_id' => 'getRequestId',
        'extractors' => 'getExtractors',
        'file' => 'getFile',
        'version' => 'getVersion',
        'processing_time' => 'getProcessingTime'
    );
  
    
    /**
      * $request_id Internal request ID.
      * @var string
      */
    protected $request_id;
    
    /**
      * $extractors List of applied extractors.
      * @var string[]
      */
    protected $extractors;
    
    /**
      * $file 
      * @var \Organizeme\Xtractor\Models\SemanticsResultMetaFile
      */
    protected $file;
    
    /**
      * $version Used API version for this request.
      * @var string
      */
    protected $version;
    
    /**
      * $processing_time Processing time for this request.
      * @var int
      */
    protected $processing_time;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->request_id = $data["request_id"];
            $this->extractors = $data["extractors"];
            $this->file = $data["file"];
            $this->version = $data["version"];
            $this->processing_time = $data["processing_time"];
        }
    }
    
    /**
     * Gets request_id
     * @return string
     */
    public function getRequestId()
    {
        return $this->request_id;
    }
  
    /**
     * Sets request_id
     * @param string $request_id Internal request ID.
     * @return $this
     */
    public function setRequestId($request_id)
    {
        
        $this->request_id = $request_id;
        return $this;
    }
    
    /**
     * Gets extractors
     * @return string[]
     */
    public function getExtractors()
    {
        return $this->extractors;
    }
  
    /**
     * Sets extractors
     * @param string[] $extractors List of applied extractors.
     * @return $this
     */
    public function setExtractors($extractors)
    {
        
        $this->extractors = $extractors;
        return $this;
    }
    
    /**
     * Gets file
     * @return \Organizeme\Xtractor\Models\SemanticsResultMetaFile
     */
    public function getFile()
    {
        return $this->file;
    }
  
    /**
     * Sets file
     * @param \Organizeme\Xtractor\Models\SemanticsResultMetaFile $file 
     * @return $this
     */
    public function setFile($file)
    {
        
        $this->file = $file;
        return $this;
    }
    
    /**
     * Gets version
     * @return string
     */
    public function getVersion()
    {
        return $this->version;
    }
  
    /**
     * Sets version
     * @param string $version Used API version for this request.
     * @return $this
     */
    public function setVersion($version)
    {
        
        $this->version = $version;
        return $this;
    }
    
    /**
     * Gets processing_time
     * @return int
     */
    public function getProcessingTime()
    {
        return $this->processing_time;
    }
  
    /**
     * Sets processing_time
     * @param int $processing_time Processing time for this request.
     * @return $this
     */
    public function setProcessingTime($processing_time)
    {
        
        $this->processing_time = $processing_time;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(get_object_vars($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(get_object_vars($this));
        }
    }
}
